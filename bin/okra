#!/usr/bin/env python3
"""Generate SQL and database accessor code for protocol buffer schemas

This module is meant to be executed as a script. It's the primary command
line interface driver for Okra. Invoke with --help for usage instructions.
"""

import argparse
import json
import os
import subprocess
import sys
import tempfile

# See https://stackoverflow.com/questions/3718657
BIN = os.path.dirname(os.path.abspath(__file__))


def script(name):
    return os.path.join(BIN, name)


def add_common_arguments(parser):
    parser.add_argument(
        '-I',
        '--proto_path',
        dest='include_paths',
        action='append',
        help=
        'directory to search for .proto files; may be specified more than once'
    )

    parser.add_argument('--dialect',
                        choices=['mysql5.6'],
                        default='mysql5.6',
                        help='SQL dialect to generate ("mysql5.6" by default)')

    parser.add_argument('proto_files',
                        metavar='proto',
                        nargs='+',
                        help='protocol buffer schema file (.proto)')

    parser.add_argument(
        '--id_fields', help='JSON object mapping type names to ID field names')

    parser.add_argument('--root_type',
                        dest='root_types',
                        action='append',
                        help='protocol buffer type to include in output')


def parse_options(args):
    parser = argparse.ArgumentParser(
        description='SQL support for protobol buffers')
    subparsers = parser.add_subparsers(dest='command')
    subparsers.required = True

    migrate = subparsers.add_parser('migrate',
                                    help='generate SQL for proto schema')
    migrate.add_argument(
        'from_refspec',
        metavar='from',
        help=
        'git refspec from which to migrate (or "-" to generate from scratch)')
    add_common_arguments(migrate)

    crud = subparsers.add_parser(
        'crud', help='generate code for create/read/update/delete')
    crud.add_argument(
        '--language',
        choices=['go'],
        default='go',
        help='programming language to generate ("go" by default)')
    add_common_arguments(crud)

    return parser.parse_args(args)


def git_work_tree():
    """Return the absolute path to the work tree directory of the git
    repository above the current working directory. Raise an exception if
    there is no such git repository.
    """
    command = 'git rev-parse --show-toplevel'.split()
    output = subprocess.run(command,
                            stdout=subprocess.PIPE,
                            encoding='utf8',
                            check=True).stdout

    # trim the trailing newline character
    return output[:-1]


def migrate(options):
    """Create a copy of a past version of the current git repository, generate
    types from the .proto files within it, and then do the same for the current
    version of the git repository. Use the two sets of types to generate SQL
    that migrates a database from the "before" to the "after." Print the SQL
    to standard output.
    """
    assert options.dialect == 'mysql5.6'

    # If `from_refspec` (the refspec of the "old version") is "-", then it's
    # not a migration; just generate SQL for all of the types.
    if options.from_refspec == '-':
        json_arg = {'protoFiles': options.proto_files}
        if options.id_fields is not None:
            json_arg['idFields'] = json.loads(options.id_fields)
        if options.root_types not in (None, []):
            json_arg['rootTypes'] = options.root_types
        if options.include_paths is not None:
            json_arg['protoIncludePaths'] = options.include_paths

        command = [script('proto2sql'), '--json', json.dumps(json_arg)]
        sys.exit(subprocess.run(command).returncode)

    # We have to write a git tree corresponding to the "from" refspec, and
    # generate types from that. Then generate types from the current tree,
    # and diff the two to get SQL statements.
    with tempfile.TemporaryDirectory() as workspace:
        tmp_repo = os.path.join(workspace, 'repo')
        os.mkdir(tmp_repo)
        rc = subprocess.run([script('gitree'), options.from_refspec,
                             tmp_repo]).returncode
        if rc:
            sys.exit(rc)

        # Now translate `options.proto_files` and `options.include_paths` to
        # be relative to `repo`, so we can call `proto2sql` in the temporary
        # repository.
        real_repo = git_work_tree()

        def bizarro(path):
            """Return the temporary-workspace-equivalent path for `path`,
            e.g. given "/path/to/real/repo/some/thing.txt", return
            "/tmp/dhdkjd/repo/some/thing.txt"
            """
            real = os.path.realpath(path)
            relative = os.path.relpath(real, real_repo)
            return os.path.join(tmp_repo, relative)

        json_arg = {
            'protoFilesBefore':
            [bizarro(path) for path in options.proto_files],
            'protoFilesAfter': options.proto_files
        }
        if options.id_fields is not None:
            json_arg['idFieldsBefore'] = json.loads(options.id_fields)
            json_arg['idFieldsAfter'] = json.loads(options.id_fields)
        if options.root_types not in (None, []):
            json_arg['rootTypesBefore'] = options.root_types
            json_arg['rootTypesAfter'] = options.root_types
        if options.include_paths is not None:
            json_arg['protoIncludePathsBefore'] = [
                bizarro(path) for path in options.include_paths
            ]
            json_arg['protoIncludePathsAfter'] = options.include_paths

        command = [script('proto2migration'), '--json', json.dumps(json_arg)]
        sys.exit(subprocess.run(command).returncode)


def crud(options):
    """Generate create/read/update/delete (CRUD) database accessor code for
    the protobuf types and in the programming language specified by `options`.
    Print the resulting code to standard output.
    """
    assert options.language == 'go'
    assert options.dialect == 'mysql5.6'

    json_arg = {'protoFiles': options.proto_files}
    if options.id_fields is not None:
        json_arg['idFields'] = json.loads(options.id_fields)
    if options.root_types not in (None, []):
        json_arg['rootTypes'] = options.root_types
    if options.include_paths is not None:
        json_arg['protoIncludePaths'] = options.include_paths

    command = [script('proto2go'), '--json', json.dumps(json_arg)]
    sys.exit(subprocess.run(command).returncode)


def main(args):
    options = parse_options(args)

    if options.command == 'migrate':
        migrate(options)
    else:
        assert options.command == 'crud'
        crud(options)


if __name__ == '__main__':
    main(sys.argv[1:])
